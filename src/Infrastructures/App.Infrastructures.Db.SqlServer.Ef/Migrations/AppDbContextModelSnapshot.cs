// <auto-generated />
using System;
using App.Infrastructures.Db.SqlServer.Ef.DbCtxs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructures.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Core.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CurrentStatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PriorityId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SubmitedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("PriorityId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.TicketCategory", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ParentId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("TicketCategories");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.TicketHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketHistories");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.TicketPriority", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("TicketPriorities");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.TicketStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("MaxWaitingHours")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("TicketStatuses");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("App.Core.Domain.Entities.TicketCategory", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_TicketCategories");

                    b.HasOne("App.Core.Domain.Entities.TicketStatus", "CurrentStatus")
                        .WithMany("Tickets")
                        .HasForeignKey("CurrentStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_TicketStatuses");

                    b.HasOne("App.Core.Domain.Entities.TicketPriority", "Priority")
                        .WithMany("Tickets")
                        .HasForeignKey("PriorityId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_TicketPriorities");

                    b.Navigation("Category");

                    b.Navigation("CurrentStatus");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.TicketHistory", b =>
                {
                    b.HasOne("App.Core.Domain.Entities.TicketStatus", "Status")
                        .WithMany("TicketHistories")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketHistories_TicketStatuses");

                    b.HasOne("App.Core.Domain.Entities.Ticket", "Ticket")
                        .WithMany("TicketHistories")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketHistories_Tickets");

                    b.Navigation("Status");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("TicketHistories");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.TicketCategory", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.TicketPriority", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("App.Core.Domain.Entities.TicketStatus", b =>
                {
                    b.Navigation("TicketHistories");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
